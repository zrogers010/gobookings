{{define "base"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        
        <title>Bootstrap demo</title>
        
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
    </head>
    <body>
        <nav class="navbar navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
           
            <div class="container-fluid">
                <a class="navbar-brand" href="#">Navbar</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarNavDropdown">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="/">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/about">About</a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Rooms
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <li><a class="dropdown-item" href="/generals-quarters">Generals Quarters</a></li>
                                <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                            </ul>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/search-availability" tabindex="-1" aria-disabled="true">Book Now</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/contact" tabindex="-1" aria-disabled="true">Contact</a>
                        </li>
                    </ul>
                </div>
            </div>

        </nav>

    {{block "content" .}}

    {{end}}

    <div class="row my-footer">

            <div class="col">
                <h1>left</h1>
            </div>
            <div class="col">
                <h1>mid</h1>
            </div>
            <div class="col">
                <h1>right</h1>
            </div>

        </div>

        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
        <script src="https://unpkg.com/notie"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        {{block "js" .}}

        {{end}}

        <script>
            let attention = Prompt();

            (() => {
                'use strict'

                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                const forms = document.querySelectorAll('.needs-validation')

                // Loop over them and prevent submission
                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                    }, false)
                })
            })()

            // notie alerts
            function notify(msg, msgType) {
                notie.alert({
                    type: msgType, 
                    text: msg, 
                    time: 1
                })
            }

            // sweetalert modals
            function notifyModal(title, html, icon, confirmButtonText) {
                Swal.fire({
                    title: title,
                    html: html,
                    icon: icon,
                    confirmButtonText: confirmButtonText,
                })
            }

            // 
            {{with .Error}}
                notify("{{.}}", "error")
            {{end}}

            {{with .Flash}}
                notify("{{.}}", "success")
            {{end}}

            {{with .Warning}}
                notify("{{.}}", "warning")
            {{end}}

            // prompt
            function Prompt() {
                let toast = function(c) {
                    const {
                        msg = "",
                        icon = "success",
                        position = "top-end",

                    } = c;
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        title: msg,
                        position: position,
                        icon: icon,
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.onmouseenter = Swal.stopTimer;
                            toast.onmouseleave = Swal.resumeTimer;
                        }
                    });
                        
                    Toast.fire({});
                }

                let success = function(c) {
                    const {
                        msg = "",
                        title = "",
                        footer = "",

                    } = c;

                    Swal.fire({
                        icon: "success",
                        title: title,
                        text: msg,
                        footer: footer,
                    });
                }

                let error = function(c) {
                    const {
                        msg = "",
                        title = "",
                        footer = "",

                    } = c;

                    Swal.fire({
                        icon: "error",
                        title: title,
                        text: msg,
                        footer: footer,
                    });
                }

                // custom sweet alert
                async function custom(c) {
                    const {
                        msg = "",
                        title = "",
                    } = c;

                    const { value: result } = await Swal.fire({
                        title: title,
                        html: msg,
                        backdrop: false,
                        focusConfirm: false,
                        showCancelButton: true,
                        willOpen: () => {
                            if (c.willOpen !== undefined) {
                            c.willOpen();
                            }
                        },
                        preConfirm: () => {
                            return [
                                document.getElementById('start').value,
                                document.getElementById('end').value
                            ]
                        },
                        didOpen: () => {
                            if (c.didOpen !== undefined) {
                                c.didOpen();
                            }
                        }
                    })

                    if (result) {
                        if (result.dismiss !== Swal.DismissReason.cancel) {
                            if (result.value !== "") {
                                if (c.callback !== undefined) {
                                    c.callback(result);
                                }
                            } else {
                                c.callback(false);
                            }
                        } else {
                            c.callback(false);
                        }
                    }
                    
                }

                return {
                    toast: toast,
                    success: success,
                    error: error,
                    custom: custom,
                }

            }
        </script>

    </body>
    </html>
{{end}}